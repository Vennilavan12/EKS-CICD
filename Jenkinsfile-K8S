
pipeline {
   tools {
        maven 'Maven3'
    }
    agent any
    environment {
        registry = "965125100596.dkr.ecr.us-east-2.amazonaws.com/project-k8s"
         AWS_CREDENTIALS = 'AWS'
         AWS_REGION = 'us-east-2'
         AWS_ACCESS_KEY_ID = crendentials('AKIA6BNPQKQ2DTZDUUAQ')
         AWS_SECRET_ACCESS_KEY = credentials('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')
    }     
   
    stages {
        stage('Cloning Git') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '', url: 'https://github.com/ReshmaSaju/EKS-CICD.git']]])     
            }
        }
      stage ('Build') {
          steps {
            sh 'mvn clean install'           
            }
      }
    // Building Docker images
    stage('Building image') {
      steps{
        script {
          dockerImage = docker.build registry 
        }
      }
    }
   
    // Uploading Docker images into AWS ECR
    stage('Pushing to ECR') {
     steps{  
         script {
               withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY}"
                        sh 'docker push 965125100596.dkr.ecr.us-east-2.amazonaws.com/project-k8s:latest'
                    }
                
         }
        }
      }

       stage('K8S Deploy') {
         steps{
            withKubeConfig(credentialsId: 'newk8s', serverUrl: 'https://299D9E8B1070C629B9A68371F84AA843.gr7.us-east-2.eks.amazonaws.com') {
               sh 'kubectl apply -f  eks-deploy-k8s.yaml'
            }
         }
       }
    }
}

